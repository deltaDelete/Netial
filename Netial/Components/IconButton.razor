@typeparam TContent

@if (IsLink) {
    <a class="netial-icon-button px-3 py-2" href="@Href">
        <div class="p-0 m-0 flex-row gap-1">
            <span class="material-symbols-rounded">@Icon</span>
            <span>@Content</span>
        </div>
    </a>
}
else {
    <button type="@Type" name="@Name" value="@Value" aria-pressed="@Pressed.ToString()" class="netial-icon-button px-3 py-2" @onclick="@(() => OnClicked.Invoke())">
        <div class="p-0 m-0 flex-row gap-1">
            <span class="material-symbols-rounded">@Icon</span>
            <span>@Content</span>
        </div>
    </button>
}

@code {

    /// <summary>
    /// Имя кнопки в пределах тега form
    /// </summary>
    [Parameter]
    public string Name { get; set; }

    /// <summary>
    /// Значение кнопки в пределах формы
    /// </summary>
    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Type { get; set; } = "submit";
    
    [Parameter]
    public TContent Content {
        get => _content;
        set {
            _content = value;
            InvokeAsync(StateHasChanged);
        }
    }

    [Parameter]
    public EventCallback<TContent> ContentChanged { get; set; }

    [Parameter]
    public bool IsToggle { get; set; } = false;

    /// <summary>
    /// Идентификатор иконки из Google Fonts
    /// </summary>
    /// <seealso href="https://fonts.google.com/icons">Google Fonts</seealso>
    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public EventCallback<IconButton<TContent>> OnClick { get; set; }

    public event Action OnClicked;

    protected override Task OnParametersSetAsync() {
        if (IsToggle)
            OnClicked += () => Pressed = !Pressed;
        OnClicked += () => OnClick.InvokeAsync(this);
        return base.OnParametersSetAsync();
    }

    [Parameter]
    public bool Pressed {
        get => _pressed;
        set {
            _pressed = value;
            InvokeAsync(StateHasChanged);
        }
    }

    [Parameter]
    public bool IsLink { get; set; }
    [Parameter]
    public string Href { get; set; }

    private TContent _content;
    private bool _pressed = false;
}