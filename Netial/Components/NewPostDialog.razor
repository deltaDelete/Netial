@using Netial.Database
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using System.Net.Mime
@using System.Collections.ObjectModel
@attribute [Authorize]
@inject AuthenticationStateProvider AuthState
@inject ApplicationContext Db
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject ILogger<NewPostDialog> Logger

<MudDialog Class="netial-border-3 p-2" Style="width: 80vw;">
    <TitleContent>
        Новый пост
    </TitleContent>
    <DialogContent>
        <form action="/api/posts" method="post" target="dummyframe" name="newpost">
            <input type="hidden" value="@_post.Author.Id" required="required" id="author" name="author"/>
            <p class="form-floating">
                <textarea type="text" wrap="soft" required="required" id="text" name="text" class="input form-control" placeholder=" " @bind="@_post.Text" style="background-color: var(--netial-body-bg); color: var(--netial-primary-color);"/>
                <label for="text">Текст</label>
            </p>
            <div class="flex-row gap-2">
                <Button Type="button" Selected="false" Text="Отмена" OnClick="Cancel"/>
                <Button Type="button" Selected="true" Text="Опубликовать" OnClick="Submit"/>
            </div>
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged"
                           @bind-Files="Files"
                           @ref="FileUpload"
                           Hidden="false"
                           Required="false"
                           Validation="ValidateFiles"
                           MaximumFileCount="10"
                           name="files"
                           id="files"
                           type="file"
                           Class="flex-1"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                           InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper MinHeight="10rem" Outlined="true" Class="@_dragClass">
                        <MudText Typo="Typo.body2">Перетащите сюда файлы или нажмите</MudText>
                        @foreach (var file in _fileNames) {
                            <MudChip Color="Color.Dark" Text="@file"/>
                        }
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        </form>
    </DialogContent>
</MudDialog>

@code {
    // todo: загрузка файлов
    private static readonly string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private Post _post = new Post();
    private string _dragClass = DefaultDragClass;
    private List<string> _fileNames = new List<string>();

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    public MudFileUpload<IReadOnlyList<IBrowserFile>> FileUpload { get; set; }
    public IReadOnlyList<IBrowserFile> Files { get; set; }

    protected override async void OnInitialized() {
        var state = await AuthState.GetAuthenticationStateAsync();
        var claims = state.User.Claims.ToDictionary(x => x.Type);
        var guid = Guid.Parse(claims[ClaimTypes.NameIdentifier].Value);

        var user = Db.Users.Find(guid);
        _post.Author = user;

        base.OnInitialized();
    }

    private void Cancel() {
        MudDialog.Cancel();
    }
    
    private async Task Submit() {
        if (FileUpload.ValidationErrors.Any()) {
            foreach (var fileUploadValidationError in FileUpload.ValidationErrors) {
                Logger.LogWarning(fileUploadValidationError);
            }
            return;
        }


        // var handler = new HttpClientHandler();
        // handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        // handler.ServerCertificateCustomValidationCallback = (message, certificate2, arg3, arg4) => true;
        // var client = new HttpClient(handler);
        var client = ClientFactory.CreateClient("Post");

        client.Timeout = TimeSpan.FromMinutes(5);
        var request = new HttpRequestMessage(HttpMethod.Post, $"{NavManager.BaseUri}api/Posts");
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(_post.Text), "text");
        content.Add(new StringContent(_post.Author.Id.ToString()), "author");

        if (Files is not null) {
            foreach (var file in Files) {
                var imageFile = await file.RequestImageFileAsync("image/jpg", 736, 400);
                content.Add(new StreamContent(imageFile.OpenReadStream(10240000L)), "files", file.Name);
            }
        }

        request.Content = content;
        await client.SendAsync(request);
        MudDialog.Close(DialogResult.Ok(_post.Id));
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e) {
        ClearDragClass();
        _fileNames.Clear();
        var files = e.GetMultipleFiles();
        foreach (var file in files) {
            _fileNames.Add(file.Name);
        }
    }

    private void SetDragClass() {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass() {
        _dragClass = DefaultDragClass;
    }

    private bool ValidateFiles(IReadOnlyList<IBrowserFile> files) {
        bool result = true;
        foreach (var file in files) {
            result &= file.Size <= 10240000L;
            result &= file.ContentType == MediaTypeNames.Image.Jpeg;
        }
        return result;
    }

}